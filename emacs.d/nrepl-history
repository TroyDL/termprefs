;; -*- coding: utf-8-unix -*-
;; Automatically written history of nREPL session
;; Edit at your own risk

("
      " "'({:id 30497, :data {:test_node \"n3\", :data 656782.4839751186}})" "'({:id 30497, :data 656782.4839751186, :test_node \"n3\"})" "'(sojourn travel journey return distinct-on strain sift)" "(run-all-tests)" "(pp)" "(util/trim-ress cyt4)" "
(def cyt4 ;;responses for tests
      (cy/query \"start n=node(*), n2=node(*) where not(n=n2) return n, n2 limit 30\"))" "(pp)" "(util/trim-ress cyt4)" "(trim-ress cyt4)" "(pp)" "(util/trim-ress cyt5)" "
(def cyt5 ;;responses for tests
      (cy/query \"start n=node(*), n2=node(*), n3=node(*)
       where not(n=n2) and not(n2=n3) and not(n=n3) return n, n2, n3 limit 30\"))" "(pp)" "(util/trim-ress cyt5)" "
(def cyt5 ;;responses for tests
      (cy/query \"start n=node(*), n2=node(*), n3=node(*)
       where not(n=n2) and not(n2=n3) and not(n=n3) return n, n2, n3 limit 18\"))" "(pp)" "(util/trim-ress cyt5)" "(pp)" "(util/trim-ress cyt6)" "(util/trim-ress cyt6)a" "
(def cyt6 ;;responses for tests
      (cy/query \"start n=node(*) match (n)-[]-(n2) return n, n2 limit 8\"))" "(util/trim-ress cyt6)" "(pp)" "(map util/trim-ress [cyt1 cyt2 cyt3 cyt4 cyt5 cyt6])" "
(def cyt1 ;;responses for tests
      (cy/query \"start n=node(*) return n limit 1\"))
(def cyt2 ;;responses for tests
      (cy/query \"start n=node(*) return n limit 5\"))
(def cyt3 ;;responses for tests
      (cy/query \"start n=node(*) return n limit 25\"))
(def cyt4 ;;responses for tests
      (cy/query \"start n=node(*), n2=node(*) where not(n=n2) return n, n2 limit 5\"))
(def cyt5 ;;responses for tests
      (cy/query \"start n=node(*), n2=node(*), n3=node(*)
       where not(n=n2) and not(n2=n3) and not(n=n3) return n, n2, n3 limit 9\"))
(def cyt6 ;;responses for tests
      (cy/query \"start n=node(*) match (n)-[]-(n2) return n limit 8\"))
" "(in-ns graphlete.data.util (+ 1 1))" "util/cyt5" "(cy/query \"start n=node(*), n2=node(*), n3=node(*)
       where not(n=n2) and not(n2=n3) and not(n1=n3) return n, n2, n3 limit 9\")" "\"make various cy queries to test trim-ress with\"" "(require '[graphlete.data.query :as q])" "(q/start )" "(util/trim-ress cyq)" "(trim-ress cyq)" "(count (reduce into () (-> cyq :data)))" "(count (reduce into '() (-> cyq :data)))" "(reduce into '() (-> cyq :data)) " "(reduce #(into () %) (-> cyq :data)) " "\"Turn it into a list of hashmaps\"" "\"vector of vectors of hashmaps\"" "cyq" "\"I have a vector of hashmaps\"" "(count (map first (-> cyq :data)))" "(map first (-> cyq :data))" "(count (-> cyq :data))" "(map (comp :data first) (-> cyq :data))" "(-> cyq :data first)" "(map :data (-> cyq :data))" "(pp)" "(-> cyq, :data)" "(-> cyq, :data, first)" "(def cyq (cy/query \"start n=node(*), n2=node(*) where not(n=n2) return n, n2 limit 4\"))" "(util/trim-res *2)" "(pp)" "(cy/query \"start n=node(*), n2=node(*) where not(n=n2) return n, n2 limit 4\")" "(cy/query \"start n=node(*), n2=node(*) where n!=n2 return n, n2 limit 4\")" "(second (second cyq))" "(:columns (second cyq))" "(second cyq)" "(type (ffirst normal-cyq))" "(type (ffirst cyq))" "(type (first normal-cyq))" "(type (first cyq))" "(type cyq)" "normal-cyq" "(count (:data normal-cyq))" "(def normal-cyq (cy/query \"start n=node(*) return n limit 4\"))" "(dev normal-cyq (cy/query \"start n=node(*) return n limit 4\"))" "(count (first (:data cyq)))" "(type (first (:data cyq)))" "(type (:data cyq))" "(count (:data cyq))" "(count (ffirst cyq))" "(def cyq (cy/query \"start n=node(2), n2=node(3), n3=node(4) return n, n2, n3\"))" "(pp)" "(cy/query \"start n=node(2), n2=node(3) return n, n2\")" "(count (second (second cyq)))" "(second (second cyq))" "(ssecond cyq)" "(second cyq)" "(util/trim-res (cy/query \"start n=node(2) match (n)-[:HAS_STAT_TYPE]-(n2)
   return n2, n\"))" "(util/trim-res (cy/query \"start n=node(2) match (n)-[:HAS_STAT_TYPE]-(n2)
   return n, n2\"))" "(util/trim-res (cy/query \"start n=node(2), n2=node(3) return n, n2\"))" "(pp)" "(cy/query \"start n=node(2), n2=node(3) return n, n2\")" "(util/trim-res (cy/query \"start n=node(2), n2=node(3) return n, n2\"))" "(util/trim-res cyq)" "(pp)" "cyq" "(def cyq (cy/query \"start n=node(*) match (n)-[:PLAYS]-(n2)-[:REPRESENTS]-(n3) return n, n2, n3 limit 3\"))" "cyq" "(util/trim-res cyq)" "(take 2 cyq)" "(take 20 (util/trim-res cyq))" "(def cyq (cy/query \"start n=node(*) match (n)-[:PLAYS]-(n2)-[:REPRESENTS]-(n3) return n, n2, n3\"))" "(pp)" "(util/trim-res cyq)" "(pp)" "(util/trim-res cyq)" "(util/trim-res scyq)" "scyq" "(def scyq (cy/query \"start n=node(2) return n\"))" "(count cyq)" "(def cyq (cy/query \"start n=node(*) match (n)-[:HAS_POSITION]-(n2) return n, n2\"))" "(take 5 (util/return players [:id]))" "(count (util/distinct-on players [:first_name]))" "(count (distinct-on players [:last_name]))" "(count players)" "(count (util/strain players [:slug]))" "(take 5 (util/strain players [:slug]))" "(util/strain players [:slug])" "(util/sift players {:last_name \"Mendez\"})" "(count players)" "(def players (util/travel 2 [:PLAYS :REPRESENTS :ATTENDS]))" "(def players (u/travel 2 [:PLAYS :REPRESENTS :ATTENDS]))" "(take 2 (u/travel 30218 [:PLAYS_FOR :PLAYS_FOR]))" "(take 2 (u/journey 30218 [:PLAYS_FOR :PLAYS_FOR]))" "(take 2 (u/sojourn 30218 [:PLAYS_FOR :PLAYS_FOR]))" "(take 222 (u/travel 30218 [:PLAYS_FOR :PLAYS_FOR]))" "(take 222 (u/journey 30218 [:PLAYS_FOR :PLAYS_FOR]))" "(pp)" "(take 222 (u/sojourn 30218 [:PLAYS_FOR :PLAYS_FOR]))" "(take 5 (u/sojourn 30218 [:PLAYS_FOR :PLAYS_FOR]))" "(take 5 (u/sojourn 30218 [:PLAYS_FOR]))" "(take 2 (u/sojourn 2 [:PLAYS :REPRESENTS :ATTENDS]))" "(u/travel 2 [])" "(u/journey 2 [])" "(u/sojourn 2 [])" "(require '[graphlete.data.util :as u])" "(sojourn 2 [])" "(require '[graphlete.data.util :refer :all])" "(take 2 (graphlete.data.util/sojourn 2 [:PLAYS :REPRESENTS :ATTENDS]))" "(util/sojourn 2 [])" "(take 5 (u/journey 30218 [:PLAYS_FOR :PLAYS_FOR]))" "(take 5 (u/journey 30218 [:PLAYS_FOR]))" "(take 5 (u/journey 30218 []))" "(take 5 (u/journey 2 [:PLAYS :REPRESENTS :ATTENDS]))" "(take 5 (u/journey 2 [:PLAYS :REPRESENTS]))" "(take 5 (u/journey 2 [:PLAYS]))" "(u/journey 2 [:PLAYS :PLAYS])" "(pp)" "(u/journey 2 [:PLAYS :REPRESENTS])" "(time (u/travel2 2 [:PLAYS :REPRESENTS :ATTENDS :PLAYS_FOR ]))" "(time (u/travel2 2 [:PLAYS :REPRESENTS :ATTENDS]))" "(time (u/travel2 2 [:PLAYS :REPRESENTS ]))" "(time (u/travel2 2 [:PLAYS :REPRESENTS :ATTENDS :PLAYS_FOR ]))" "(time (u/cy-traveler 2 [:PLAYS :REPRESENTS :ATTENDS :PLAYS_FOR]))" "(time (u/travel2 2 [:PLAYS :REPRESENTS :ATTENDS :PLAYS_FOR ]))" "(u/travel2 2 [:PLAYS :REPRESENTS :ATTENDS :PLAYS_FOR ])" "(u/travel2 2 [:PLAYS :REPRESENTS :ATTENDS :PLAYS_FOR])" "(u/travel2 2 [:PLAYS :REPRESENTS :ATTENDS])" "(u/travel2 2 [])" "(u/travel2 2 [:PLAYS])" "(u/travel2 2 [:PLAYS :REPRESENTS])" "(u/travel2 2 [:PLAYS :REPRESENTS :REPRESENTS])" "(u/travel2 2 [:PLAYS :REPRESENTS :PLAYS])" "(gensym \"blah\")" "(u/travel2 2 [:PLAYS :REPRESENTS])" "(keyword \"a\")" "(keyword \\a)" "(->> (range (int \\a) (int \\z)) (map char) (map keyword))" "(->> (range (int \\a) (int \\z)) (map char) keyword)" "(->> (range (int \\a) (int \\z)) (map char))" "(u/travel2 2 [:PLAYS :REPRESENTS])" "(repeatedly 5 gensym)" "(gensym)" "(gynsym)" "(u/travel2 2 [:PLAYS :REPRESENTS])" "(map (comp keyword str) (range \\a \\d))" "(map (comp keyword str) '(a b c d))" "(u/travel2 2 [:PLAYS :REPRESENTS])" "(eval (u/travel2 2 [:PLAYS :REPRESENTS]))" "(pp)" "(u/travel2 2 [:PLAYS :REPS])" "(pp)" "(u/travel2 2 [:PLAYS :REPS])" "(pp)" "(u/travel2 2 [:PLAYS :REPS])" "(u/travel2 [:PLAYS :REPS])" "(u/travel2 2 [:PLAYS :REPS])" "(u/travel2 2 [:PLAYS])" "(pp)" "(u/travel2 2 [:PLAYS])" "(u/travel2 2 '(:PLAYS))" "(u/travel2 2 [:PLAYS])" "(keyword \"1\")" "(keyword 1)" "(map `#(q/match [:n [~%] :n2]) [:FOO :BAR])" "(map '#(q/match [:n [%] :n2]) [:FOO :BAR])" "(map #'(q/match [:n [%] :n2]) [:FOO :BAR])" "(map #`(q/match [:n [%] :n2]) [:FOO :BAR])" "(take 2 (u/cy-traveler 2 [:PLAYS :REPRESENTS]))" "(u/travel2 2 [:PLAYS])" "(u/travel2 2 [:PLAYS]))" "(u/travel2)" "(take 2 (u/trim-res (q/start {:n (q/node 2)}
                       (q/match [:n [:PLAYS] :n1])
                       (q/match [:n1 [:REPRESENTS] :n2])
                       (q/return :n2))))" "(take 2 (u/trim-res (q/start {:n (q/node 2)}
                       (q/match [:n [:HAS_POSITION] :n2])
                       (q/return :n2))))" "(take 2 (q/start {:n (q/node 2)}
                       (q/match [:n [:HAS_POSITION] :n2])
                       (q/return :n2)))" "(take 2 (q/start {:n (q/node 2)}
                       (q/match [:n [:HAS_POSITION] :n2])
                       (q/return :n2]))" "(require '[graphlete.data.util :as u])" "(require '[graphlete.data.query :as q])" "(util.q/start)" "(util.q/start*)" "(take 5 (util/travel 2 [:PLAYS :COMPETED_IN :COMPETED_IN]))" "(nrl/all-for 30447)" "(take 5 (util/travel 2 [:PLAYS :COMPETED_IN]))" "(nrl/all-for 30449)" "(take 5 (util/travel 2 [:PLAYS]))" "(take 5 (util/travel 2 [:PLAYS :DURING]))" "(take 5 (util/travel 2 [:PLAYS :COMPETED_IN :DURING]))" "(util/travel 2 [:PLAYS :COMPETED_IN])" "(util/travel 2 [:HAS_POSITION])" "(util/travel 2 [:PLAYS :REPRESENTS])" "(pprint (take 2 *1))" "(util/travelm2 [:PLAYS :REPRESENTS])" "(interleave (map #(conj [] %) [:foo :bar]) (repeatedly #(str \"()\")))" "(map #(conj [] %) [:foo :bar])" "(let [rs (map #(conj [] %) [:FOO :BAR])]
        (interleave (reduce into '() rs) 
                    (repeatedly #(str \"()\"))))" "(let [rs (map #(conj [] %) [:FOO :BAR])
            n (count rs)]
        (interleave (reduce into '() rs) 
                    (repeatedly (dec n) #(str \"()\"))))" "(let [rs (map #(conj [] %) [:FOO :BAR])]
        (interleave (reduce into '() rs) 
                    (repeatedly #(str \"()\"))))" "(map #(conj [] %) [:foo :bar])" "(map (comp vec keyword) '[foo bar])" "(map keyword '[foo bar])" "(map keyword [foo bar])" "(keyword 'foo)" "(symbol :foo)" "(map symbol [:foo :bar])" "(map seq [:foo :bar])" "(seq [:foo :bar])" "(seq 2)" "(map seq [1 2 3])" "(map vec [1 2 3])" "(vec [:foo :bar])" "(map vec '[:foo :bar])" "(map vec [:foo :bar])" "(let [rs [[[:FOO]] [[:BAR]]]]
        (interleave (reduce into '() rs) 
                    (repeatedly #(str \"()\"))))" "(let [rs [[:FOO] [[:BAR]]]]
        (interleave (reduce into '() rs) 
                    (repeatedly #(str \"()\"))))" "(let [rs [[:FOO] [:BAR]]]
        (interleave (reduce into '() rs) 
                    (repeatedly #(str \"()\"))))" "(let [rs [:FOO :BAR]]
        (interleave (reduce into '() ['([:b]) '([:c]) '([:e])]) 
                    (repeatedly #(str \"()\"))))" "(let [rs [:FOO :BAR]]
        (interleave (reduce into '() rs) 
                    (repeatedly #(str \"()\"))))" "(interleave (reduce into '() ['([:b]) '([:c]) '([:e])]) (repeatedly #(str \"()\")))" "(let [rels [:PLAYS :REPRESENTS]
            n (count rels)
              rs (interleave (reduce into '() rels)
                              (repeatedly (dec n) #(str \"()\")))
              ]
        rs)" "(let [rels '[:PLAYS :REPRESENTS]
            n (count rels)
              rs (interleave (reduce into '() rels)
                              (repeatedly (dec n) #(str \"()\")))
              fin `(q/start* {:n \"node(2)\"}
                             (q/match [:n ~@rs :n2])
                             (q/return :n2))]
        fin)" "(let [rels [:PLAYS :REPRESENTS]
            n (count rels)
              rs (interleave (reduce into '() rels)
                              (repeatedly (dec n) #(str \"()\")))
              fin `(q/start* {:n \"node(2)\"}
                             (q/match [:n ~@rs :n2])
                             (q/return :n2))]
        fin)" "(pp)" "(let [rels [:PLAYS :REPRESENTS]
            n (count rels)
              rs `(interleave (reduce into '() ~rels)
                              (repeatedly (dec ~n) #(str \"()\")))
              fin `(q/start* {:n \"node(2)\"}
                             (q/match [:n ~@rs :n2])
                             (q/return :n2))]
        fin)" "(let [rs (interleave (reduce into '() ['([:b]) '([:c]) '([:e])]) (repeatedly #(str \"()\")))] (seq rs))" "(let [rs (interleave (reduce into '() ['([:b]) '([:c]) '([:e])]) (repeatedly #(str \"()\")))] rs)" "(first (util/travelm [:PLAYS :REPRESENTS]))" "(first (travelm [:PLAYS :REPRESENTS]))" "#_(defn travelm [rels]
  (let [n (count rels)
        rs `(interleave (reduce into '() ~rels)
                        (repeatedly (dec ~n) #(str \"()\")))
        fin `(q/start* {:n \"node(2)\"}
                 (q/match [:n ~@rs :n2])
                 (q/return :n2))]
     fin))" "(pp)" "(util/travelm [:PLAYS :REPRESENTS])" "(q/start* {:n \"node(2)\"}
                    (q/match [:n [:PLAYS] \"()\" [:REPRESENTS] \"()\" [:BAH] :n2])
                    (q/return :n2))" "(interleave (reduce into '() ['([:b]) '([:c]) '([:e])]) (repeatedly #(str \"()\")))" "(repeatedly 2 #(str \"()\"))" "(seq (repeatedly 2 #(str \"()\"))) " "(seq (repeatedly 2 (str \"()\"))) " "(seq (repeatedly (str \"()\"))) " "(take 2 (repeatedly (str \"()\")))" "(take 2 (repeatedly \"()\"))" "(interleave (reduce into '() ['([:b]) '([:c]) '([:e])]) (repeatedly \"()\"))" "(reduce into '() ['([:b]) '([:c]) '([:e])])" "(reduce into '() ['[:b] '[:c] '[:e] '[:d]])" "(reduce into '() [[:b] [:c] [:e] [:d]])" "(reduce into '() ['([:b] \"()\" [:c]) '([:e] \"()\" [:d])])" "(reduce #(into '() %) ['([:b] \"()\" [:c]) '([:e] \"()\" [:d])])" "(map #(into '() %) ['([:b] \"()\" [:c]) '([:e] \"()\" [:d])])" "(into '() ['([:b] \"()\" [:c]) '([:e] \"()\" [:d])])" "(into '() '([:b] \"()\" [:c]))" "(conj '() (first '([:b] \"()\" [:c])))" "(conj '() '([:b] \"()\" [:c]))" "(conj '() [:b])" "(join )" "(pp)" "(util/travelm [:PLAYS :REPRESENTS])" "(eval (util/travelm [:PLAYS :REPRESENTS]))" "(util/travelm [:FOO :BAR])" "(util/trevelm [:FOO :BAR])" "(trevelm [:FOO :BAR])" " '([:k] () [:b])" "(seq '([:k] () [:b]))" "(seq \"[:k] () [:b]\")" "(let [k '([:K1] () [:K2])] `(q/match [:n ~@k :n2]))" "*1" "(let [k '([:K1] () [:K2])] `(print ~@k))" "(let [k '([:K1] () [:K2])] ~@k)" "(let [k '([:K1] () [:K2])] ~k)" "(let [k '([:K1] () [:K2])] k)" "(let [k '([:K1] () [:K2])])" "(eval (util/travelm 2 \"[:HAS_POSITION] () [:REPRESENTS]\"))" "(util/travelm 2 \"[:HAS_POSITION] () [:REPRESENTS]\")" "(eval \"BLAH FOO\")" "(util/travelm 2 \"[:HAS_POSITION] () [:REPRESENTS]\")" "(util/travelm 2 [:HAS_POSITION])" "(q/start* {:n (q/node 2)} (q/match [:n [:HAS_POSITION] :n2]) (q/return :n))" "(q/start* {:n (q/node 2)} (q/match [:n [:HAS_POSITION] :n2]) (q/return :n3))" "(q/start {:n (q/node 2)} (q/match [:n [:HAS_POSITION] :n2]) (q/return :n3))" "(q/start {:n (q/node 2)} (q/match [:n [:HAS_POSITION] :n2]) (q/return :n2))" "(q/start {:n (q/node 2)} (q/match [:n \"-\" [:HAS_POSITION] \"->\" :n2]) (q/return :n))" "(q/start {:n (q/node 2)} (q/match [:n [:HAS_POSITION] :n2]) (q/return :n))" "(q/start {:n (q/node 2)} (q/match [:n [:BAR] \"-\" :n2]) (q/return :n))" "(q/start {:n (q/node 2)} (q/match [:n [:BAR] :n2]) (q/return :n))" "(q/start {:n (q/node 2)} (q/match [:n [:BAR] :n2]))" "(q/start (q/match [:n [:BAR] :n2]) (q/return :n2))" "(q/start (q/match [:n [:BAR] :n2]))" "(q/match [:sport [:HAS_SCORE_TYPE] :score_type])" "(q/match [:n [:BAR] :n2])" "(q/match [:n :n2])" "(util/travelm 2 [:PLAYS :REPRESENTS])" "(travelm 2 [:PLAYS :REPRESENTS])" "`(+ 1 1)" "(eval `~(+ 1 1))" "(eval `@(+ 1 1))" "(eval `(+ 1 1))" "(eval '(+ 1 1))" "(eval \"(+ 1 1)\")" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:PLAYS] \"-()\" [:REPRESENTS] :n2])
                    (q/match [:n [:FOOBAR] :n2])
                    (q/return :n2)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:PLAYS] \"-()\" [:REPRESENTS] :n2])
                    (q/return :n2)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:PLAYS] \"()\" [:REPRESENTS] :n2])
                    (q/return :n23)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:PLAYS] \"()\" [:REPRESENTS] :n2])
                    (q/return :n2)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:PLAYS] [:REPRESENTS] :n2])
                    (q/return :n2)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:PLAYS] \"()\" [:REPRESENTS] :n2])
                    (q/return :n2)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:PLAYS] \"-()-\" [:REPRESENTS] :n2])
                    (q/return :n2)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n \"-\" [:PLAYS] \"->\" :n2])
                    (q/return :n2)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:PLAYS :REPRESENTS] :n2])
                    (q/return :n2)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:PLAYS] :n2])
                    (q/return :n2)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :position)))" "(util/trim-res (q/start {:n \"node(2)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)))" "(util/trim-res (q/start {:n \"node(*)\"}
                    (q/match [:n \"-\" [:HAS_POSITION] \"->\" :position])
                    (q/return :n)))" "(graphlete.data.sport/find-score-types-by-sport-id 2)" "(require '[graphlete.data :as d])" "(util/trim-res (q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :position)))" "(pp)" "(util/trim-res (q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)))" "(util/trim-res (q/start {:sport \"node:sports('slug:*')\"}
      (q/return :sport)))" "(trim-res (q/start {:sport \"node:sports('slug:*')\"}
      (q/return :sport)))" "(q/start {:sport \"node:sports('slug:*')\"}
      (q/return :sport))" "(trim-res (q/exec (q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n))))" "(trim-res (q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)))" "(= (q/start {:n \"node(*)\"}
                  (q/match [:n [:HAS_POSITION] :position])
                  (q/return :n))
         (q/with-query-result 
          n 
          (q/start {:n \"node(*)\"}
                   (q/match [:n [:HAS_POSITION] :position])
                   (q/return :n)) n))" "(q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n))" "(q/with-query-result n (q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)) n)" "(q/with-query-result (q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)))" "(q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n))" "(graphlete.data.sport/find-sport-by-id 2)" "(pprint (cy/query \"start n=node(2) return n\"))" "(trim-res (cy/query \"start n=node(2) return n\"))" "(trim-res (cy/query \"start n=node:schools('name:*') return n limit 2\"))" "(cy/query \"start n=node:schools('name:*') return n limit 2\")" "(println (cy/query \"start n=node:schools('name:*') return n limit 2\"))" "(trim-res (cy/query \"start n=node:schools('name:*') return n limit 2\"))" "(trim-res (cy/query \"start n=node:schools('slug:*') return n limit 2\"))" "(count (cy/query \"start n=node:schools('slug:*') return n limit 2\"))" "(count (cy/query \"start n=node:sports('slug:*') return n\"))" "(trim-res (cy/query \"start n=node:sports('slug:*') return n\"))" "(cy/query \"start n=node:sports('slug:*') return n\")" "(cy/query \"start n=node:sports('name:*') return n\")" "(trim-res (cy/query \"start n=node:sports('name:*') return n\"))" "(graphlete.data.sport/find-positions-by-sport-id 2)" "(graphlete.data.sport/find-sport-by-id 2)" "(trim-res (graphlete.data.sport/find-all-sports))" "(graphlete.data.sport/find-all-sports)" "(trim-res (q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :position)
                    (q/limit 1)))" "(trim-res (q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)
                    (q/limit 1)))" "(q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)
                    (q/limit 1))" "(q/start* {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n))" "(macroexpand-1 '(q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)))" "(macroexpand-1 (q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)))" "(eval `(q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)))" "(eval '(q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n)))" "(q/start* {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n))" "(q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n))" "(require '[graphlete.data.query :as q])" "(require [graphlete.data.query :as q])" "(q/start {:n \"node(*)\"}
                    (q/match [:n [:HAS_POSITION] :position])
                    (q/return :n))" "(pp)" "(util/travel 2 [:HAS_POSITION])" "(util/travel)" "(take 1 (util/travel 2 [:PLAYS]))" "(ns user)" "(sql/select sql-sport)" "(ns dev.import)" "(sql/select sql-sport)" "(ns import)" "(import.sql/select sql-sport)" "(import/select sql-sport)" "(kc/select sql-sport)" "(pp)" "(util/travel 2 [:PLAYS])" "(util/travel 2 [])" "(return (util/travel 371 [:ATTENDS]) [:last_name])" "(return (util/travel 371 [:ATTENDS]) [:first_name])" "(return (util/travel 371 [:ATTENDS]) [:slug])" "(return (util/travel 371 [:ATTENDS]) [:name])" "(return (util/travel 371 [:ATTENDS :PLAYS_POSITION]) [:name])" "(distinct *1)" "(return (util/travel 371 [:ATTENDS :PLAYS_POSITION]) [:name])" "(return (util/travel 371 [:ATTENDS :PLAYS_POSITION]) [:abbreviation])" "(util/travel 394 [:ATTENDS])" "(pp)" "(nrl/all-for 32)" "(util/travel 2 [:PLAYS :REPRESENTS])" "(pprint (take 2 *1))" "(util/travel 2 [:PLAYS :REPRESENTS])" "(util/travel 2 [:PLAYS])" "(->> [:PLAYS :REPRESENTS]
           (map (fn [rt] (format \"-[%s]\" rt)) ,)
           (str/join \"-()\"))" "(->> [:PLAYS :REPRESENTS]
           (map (fn [rt] (format \"-[%s]\" rt)) ,)
           (str/join \"-()\" %))" "(->> [:PLAYS :REPRESENTS]
           (map (fn [rt] (format \"-[%s]\" rt)) ,)
           #_(reduce #(str/join \"-()\" %) ,))" "(->> [:PLAYS :REPRESENTS]
           (map (fn [rt] (format \"-[%s]\" rt)) ,)
           (reduce #(str/join \"-()\" %) ,))" "(reduce #(str/join \"-()\" %) (map (fn [rt] (format \"-[%s]\" rt)) [:PLAYS :REPRESENTS]))
                  " "(->> (map (fn [rt] (format \"-[%s]\" rt)) [:PLAYS :REPRESENTS])
                  (reduce #(str/join \"-()\" %)))" "(str/join \"-()\" [\"[2]\" \"[3]\"])" "(cy/query \"start n=node(2) match (n)-[:PLAYS]-()-[:REPRESENTS]-(n2) return n2 limit 1\")" "(cy/query \"start n=node(2) match (n)-[:PLAYS]-[:REPRESENTS]-(n2) return n2 limit 1\")" "(util/travel 2 '(:PLAYS :REPRESENTS))" "(map (fn [rt] (format \"-[%s]\" rt)) [:PLAYS :REPRESENTS])" "(->> (map (fn [rt] (format \"-[%s]\" rt)) '(:PLAYS :REPRESENTS))
           (reduce str))" "(->> (map (fn [rt] (format \"-[%s]\" rt)) [:PLAYS :REPRESENTS])
           (reduce str))" "(map (fn [rt] (format \"-[%s]\" rt)) [:PLAYS :REPRESENTS])" "(util/travel 2 '(:PLAYS :REPRESENTS))" "(util/travel 2)" "(util/travel 2 '(:PLAYS :REPRESENTS))" "(util/travel 2 [:PLAYS :REPRESENTS])" "(require '[graphlete.data.util :as util])" "(require 'graphlete.data.util :as util)" "(travel 2 [:PLAYS :REPRESENTS])" "(sort (find-all-rel-types))" "(sort *1)" "(find-all-rel-types)" "(pp)" "(first-level-rels 2 :PLAYS)" "(nrl/all-for 2)" "(find-all-sports)" "(use 'graphlete.data.sport)" "(use 'graphlete.data.util)" "
#_(defn first-level-rels [node-id rel-type]
  (let [q (format \"START n=node(%d) MATCH (n)-[:%s]-(n2) return n2\")]
    (-> q
        cy/query
         )))" "(:data (first flr))" "(ffirst flr)" "(first flr)" "(count (first flr))" "(count pflr)" "(def pflr (partition 2 (first flr)))" "(count flr)" "(pp)" "(take 2 pflr)" "(def pflr (partition 2 flr))" "(def flr (cy/query \"start n=node(2) match (n)-[r]-(n2) return r, n2\"))" "(pp)" "(cy/query \"start n=node(2) match (n)-[r]-(n2) return r, n2\")" "(find-league-by-id 194)" "(find-all-leagues)" "(use 'graphlete.data.league)" "(find-all-leagues)" "(graphlete.data.sport/find-score-types-by-sport-id 2)" "(graphlete.data.sport/find-action-types-by-sport-id 2)" "(graphlete.data.sport/find-positions-by-sport-id 2)" "(graphlete.data.sport/find-sport-by-id 2)" "(graphlete.data.sport/find-all-sports)" "(take 2 (graphlete.data.school/find-school-by-id 445))" "(take 2 (graphlete.data.school/find-all-schools))" "(cy/query \"start n=node(*) where HAS(n.type) and n.type='test-node' return n\")" "'({:id node-id, :game_type \"Non-league\", :type \"test-node\", :date \"2007\"} {:id node2-id, :game_type \"league\", :type \"test-node\", :date \"2008\"})" "'({:id 30457, :game_type \"Non-league\", :type \"test-node\", :date \"2007\"} {:id 30458, :game_type \"league\", :type \"test-node\", :date \"2008\"})" "(cy/query \"start n=node(*) where Has(n.type) and n.type='test-node' return n\")" "(graphlete.data.util/trim-res (:data (cy/query \"start n=node(*) where Has(n.type) and n.type='test-node' return n\")))" "'({:id node-id, :game_type \"Non-league\", :type \"test-node\", :date \"2007\"} {:id node2-id, :game_type \"league\", :type \"test-node\", :date \"2008\"})" "'({:id 30455, :game_type \"Non-league\", :type \"test-node\", :date \"2007\"})" "(graphlete.data.util/trim-res (:data (cy/query \"start n=node(*) where Has(n.type) and n.type='test-node' return n\")))" "(cy/query \"start n=node(*) where Has(n.type) and n.type='test-node' delete n\")" "(pp)" "(graphlete.data.util/trim-res (:data (cy/query \"start n=node(*) where Has(n.type) and n.type='test-node' return n\")))" "(graphlete.data.util/trim-res (first (cy/query \"start n=node(*) where Has(n.type) and n.type='test-node' return n\")))" "(trim-res (first (cy/query \"start n=node(*) where Has(n.type) and n.type='test-node' return n\")))" "(pp)" "(cy/query \"start n=node(*) where Has(n.type) and n.type='test-node' return n\")" "(graphlete.data.util/trim-res (:data (cy/query q1)))" "(graphlete.data.util/trim-res (cy/query q1))" "(pp)" "(cy/query q1)" "(def q1 (format \"start n=node(%d) return n\" (:id n1)))" "(format \"start n=node(%d) return n\" (:id n1))" "(node-count)" "(:id n1)" "(node-count)" "n1" "(node-count)" "(def n1 (nn/create {:game_type \"Non-league\",
                         :type \"test-node\",
                         :date \"2007-09-29T09:30:00Z\"}))" "(node-count)" "(pp)" "(graphlete.data.school/find-all-schools)" "(ns user)" "(pp)" "(find-all-schools)" "(ns graphlete.data.school)" "(graphlete.data.school/find-all-schools)" "(take 2 (graphlete.data.school/find-all-schools))" "(take 2 (graphlete.data.query.school/find-all-schools))" "(take 2 (src.graphlete.data.school/find-all-schools))")